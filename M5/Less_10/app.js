// ‍Модуль 𝟱. Заняття 𝟭𝟬. Прототипи та класи

// ‍𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝟭 - Блогер
// Напиши клас 𝗕𝗹𝗼𝗴𝗴𝗲𝗿 для створення об'єкта блогера з наступними властивостями:

// 𝗲𝗺𝗮𝗶𝗹 - пошта, рядок
// 𝗮𝗴𝗲 - вік, число
// 𝗻𝘂𝗺𝗯𝗲𝗿𝗢𝗳𝗣𝗼𝘀𝘁𝘀 - кількість постів, число
// 𝘁𝗼𝗽𝗶𝗰𝘀 - масив тем на яких спеціалізується блогер

// Клас чекає один параметр - об'єкт налаштувань з однойменними властивостями.

// Додай метод 𝗴𝗲𝘁𝗜𝗻𝗳𝗼(), який, повертає рядок: 𝗨𝘀𝗲𝗿 ${пошта} 𝗶𝘀 ${вік} 𝘆𝗲𝗮𝗿𝘀 𝗼𝗹𝗱 𝗮𝗻𝗱 𝗵𝗮𝘀 ${кількість постів} 𝗽𝗼𝘀𝘁𝘀.

// Додай метод 𝘂𝗽𝗱𝗮𝘁𝗲𝗣𝗼𝘀𝘁𝗖𝗼𝘂𝗻𝘁(𝘃𝗮𝗹𝘂𝗲), який у параметрі 𝘃𝗮𝗹𝘂𝗲 приймає кількість постів, які потрібно додати користувачеві

// class Blogger {
// 	constructor({ email, age, numberOfPosts, topics }) {
// 		this.email = email
// 		this.age = age
// 		this.numberOfPosts = numberOfPosts
// 		this.topics = topics
// 	}
// 	getInfo() {
// 		return `User ${this.email} is ${this.age} years old and has ${this.numberOfPosts} posts`
// 	}
// 	updatePostCount(value) {
// 		this.numberOfPosts += value
// 	}
// }

// const blogger = new Blogger({
// 	email: 'asd@asd.co',
// 	age: 29,
// 	numberOfPosts: 12,
// 	topics: ['tech', 'cooking'],
// })

// console.log(blogger.getInfo())
// blogger.updatePostCount(20)
// console.log('blogger', blogger)

// ‍𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝟮 - Сховище
// Напиши клас 𝗦𝘁𝗼𝗿𝗮𝗴𝗲 який створює об'єкти для керування складом товарів. При виклику отримуватиме один аргумент - початковий масив товарів і записуватиме його властивість 𝗶𝘁𝗲𝗺𝘀.

// Додай методи класу:

// 𝗴𝗲𝘁𝗜𝘁𝗲𝗺𝘀() - повертає масив товарів.
// 𝗮𝗱𝗱𝗜𝘁𝗲𝗺(𝗶𝘁𝗲𝗺) - отримує новий товар і додає його до поточних.
// 𝗿𝗲𝗺𝗼𝘃𝗲𝗜𝘁𝗲𝗺(𝗶𝘁𝗲𝗺) - отримує товар і, якщо він є, видаляє його з поточних.

class Storage {
	constructor(items) {
		this.items = items
	}
	getItems() {
		return this.items
	}

	addItem(item) {
		this.items.push(item)
	}

	removeItem(item) {
		// this.items = this.items.filter( //// >>>>not work!!
		// 	(item, index, arr) => arr.indexOf(item) === index
		// )

		// this.items = this.items.filter((i) => i !== item)

		if (this.items.includes(item)) {
			this.items.splice(this.items.indexOf(item), 1)
		}
	}
}

// const storage = new Storage(['🍎', '🍋', '🍇', '🍑', '🍑', '🍇'])
const arr = []
for (let i = 0; i < 100; i++) {
	const storage = new Storage(['🍎', '🍋', '🍇', '🍑', '🍑', '🍇'])
	arr.push(storage)
}
console.log('arr', arr)
// storage.addItem({ item: [42] })
// storage.removeItem('asd')
// console.log(storage.getItems())

// const storage = {
// 	items: ['🍎', '🍋', '🍇', '🍑', '🍑', '🍇'],
// 	getItems() {
// 		return storage.items
// 	},
// 	addItem(item) {
// 		storage.items.push(item)
// 	},
// }

// const storage2 = {
// 	items: [1,2,3,4],
// 	getItems() {
// 		return storage2.items
// 	},
// 	addItem(item) {
// 		storage2.items.push(item)
// 	},
// }

// console.log('storage', storage)

// ‍‍𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝟯 - 𝗨𝘀𝗲𝗿
// Напиши клас 𝗨𝘀𝗲𝗿 який створює об'єкт із властивостями 𝗹𝗼𝗴𝗶𝗻 та 𝗲𝗺𝗮𝗶𝗹. Оголоси приватні властивості #𝗹𝗼𝗴𝗶𝗻 та #𝗲𝗺𝗮𝗶𝗹, доступ до яких зроби через гетер та сетер 𝗹𝗼𝗴𝗶𝗻 та 𝗲𝗺𝗮𝗶𝗹.

// class User {
// 	#login
// 	#email
// 	constructor(option) {
// 		this.#login = option.login
// 		this.#email = option.email
// 		this.admin = 'admin'
// 	}

// 	// get User(){
// 	//     return `${this.#login} ${this.#email}`
// 	// }
// 	get email() {
// 		return this.#email
// 	}

// 	get login() {
// 		return this.#login
// 	}

// 	set email(newEmail) {
// 		if (user.hasOwnProperty('admin')) this.#email = newEmail
// 	}

// 	set login(newLogin) {
// 		this.#login = newLogin
// 	}
// }

// const user = new User({
// 	login: 'Alex',
// 	email: 'asd@asd.co',
// })

// console.log('user.email', user.email)
// user.email = 'QWE@qwe.com'
// console.log('user.email', user.email)

// console.log('user', user)

// 𝗰𝗼𝗻𝘀𝘁 𝗺𝗮𝗻𝗴𝗼 = 𝗻𝗲𝘄 𝗨𝘀𝗲𝗿({
//   𝗹𝗼𝗴𝗶𝗻: '𝗠𝗮𝗻𝗴𝗼',
//   𝗲𝗺𝗮𝗶𝗹: '𝗺𝗮𝗻𝗴𝗼@𝗱𝗼𝗴.𝘄𝗼𝗼𝗳',
// });

// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝗮𝗻𝗴𝗼.𝗹𝗼𝗴𝗶𝗻); // 𝗠𝗮𝗻𝗴𝗼
// 𝗺𝗮𝗻𝗴𝗼.𝗹𝗼𝗴𝗶𝗻 = '𝗠𝗮𝗻𝗴𝗼𝗱𝗼𝗴𝗲';
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝗮𝗻𝗴𝗼.𝗹𝗼𝗴𝗶𝗻); // 𝗠𝗮𝗻𝗴𝗼𝗱𝗼𝗴𝗲

// 𝗰𝗼𝗻𝘀𝘁 𝗽𝗼𝗹𝘆 = 𝗻𝗲𝘄 𝗨𝘀𝗲𝗿({
//   𝗹𝗼𝗴𝗶𝗻: '𝗣𝗼𝗹𝘆',
//   𝗲𝗺𝗮𝗶𝗹: '𝗽𝗼𝗹𝘆@𝗺𝗮𝗶𝗹.𝗰𝗼𝗺',
// });

// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗽𝗼𝗹𝘆.𝗹𝗼𝗴𝗶𝗻); // 𝗣𝗼𝗹𝘆
// 𝗽𝗼𝗹𝘆.𝗹𝗼𝗴𝗶𝗻 = '𝗣𝗼𝗹𝘆𝗰𝘂𝘁𝗶𝗲';
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗽𝗼𝗹𝘆.𝗹𝗼𝗴𝗶𝗻); // 𝗣𝗼𝗹𝘆𝗰𝘂𝘁𝗶𝗲

// ‍‍‍𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝟰 - Нотатки
// Напиши клас 𝗡𝗼𝘁𝗲𝘀 який керує колекцією нотаток у властивості 𝗶𝘁𝗲𝗺𝘀. Замітка це об'єкт із властивостями 𝘁𝗲𝘅𝘁 та 𝗽𝗿𝗶𝗼𝗿𝗶𝘁𝘆. Додай класу статичну властивість 𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝘆, у якому зберігатиметься об'єкт із пріоритетами.

// {
//   𝗟𝗢𝗪: '𝗹𝗼𝘄',
//   𝗡𝗢𝗥𝗠𝗔𝗟: '𝗻𝗼𝗿𝗺𝗮𝗹',
//   𝗛𝗜𝗚𝗛: '𝗵𝗶𝗴𝗵'
// }
// Додай методи 𝗮𝗱𝗱𝗡𝗼𝘁𝗲(𝗻𝗼𝘁𝗲), 𝗿𝗲𝗺𝗼𝘃𝗲𝗡𝗼𝘁𝗲(𝘁𝗲𝘅𝘁) та 𝘂𝗽𝗱𝗮𝘁𝗲𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝘆(𝘁𝗲𝘅𝘁, 𝗻𝗲𝘄𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝘆).

// 𝗰𝗼𝗻𝘀𝘁 𝗺𝘆𝗡𝗼𝘁𝗲𝘀 = 𝗻𝗲𝘄 𝗡𝗼𝘁𝗲𝘀([]);

// 𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗮𝗱𝗱𝗡𝗼𝘁𝗲({ 𝘁𝗲𝘅𝘁: 'Моя перша замітка', 𝗽𝗿𝗶𝗼𝗿𝗶𝘁𝘆: 𝗡𝗼𝘁𝗲𝘀.𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝘆.𝗟𝗢𝗪 });
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗶𝘁𝗲𝗺𝘀);

// 𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗮𝗱𝗱𝗡𝗼𝘁𝗲({
//   𝘁𝗲𝘅𝘁: 'Моя друга замітка',
//   𝗽𝗿𝗶𝗼𝗿𝗶𝘁𝘆: 𝗡𝗼𝘁𝗲𝘀.𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝘆.𝗡𝗢𝗥𝗠𝗔𝗟,
// });
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗶𝘁𝗲𝗺𝘀);

// 𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗿𝗲𝗺𝗼𝘃𝗲𝗡𝗼𝘁𝗲('Моя перша замітка');
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗶𝘁𝗲𝗺𝘀);

// 𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝘂𝗽𝗱𝗮𝘁𝗲𝗡𝗼𝘁𝗲('Моя друга замітка', 𝗡𝗼𝘁𝗲𝘀.𝗣𝗿𝗶𝗼𝗿𝗶𝘁𝘆.𝗛𝗜𝗚𝗛);
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗺𝘆𝗡𝗼𝘁𝗲𝘀.𝗶𝘁𝗲𝗺𝘀);

// ‍‍‍‍𝗘𝘅𝗮𝗺𝗽𝗹𝗲 𝟱 - 𝗧𝗼𝗴𝗴𝗹𝗲
// Напишіть клас 𝗧𝗼𝗴𝗴𝗹𝗲 який приймає об'єкт налаштувань {𝗶𝘀𝗢𝗽𝗲𝗻: 𝗯𝗼𝗼𝗹𝗲𝗮𝗻} і оголошує одну властивість 𝗼𝗻 - стан вкл/викл (𝘁𝗿𝘂𝗲/𝗳𝗮𝗹𝘀𝗲). За замовчуванням значення властивості 𝗼𝗻 повинно бути 𝗳𝗮𝗹𝘀𝗲.

// 𝗰𝗼𝗻𝘀𝘁 𝗳𝗶𝗿𝘀𝘁𝗧𝗼𝗴𝗴𝗹𝗲 = 𝗻𝗲𝘄 𝗧𝗼𝗴𝗴𝗹𝗲({ 𝗶𝘀𝗢𝗽𝗲𝗻: 𝘁𝗿𝘂𝗲 });
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗴𝗿𝗼𝘂𝗽('𝗳𝗶𝗿𝘀𝘁𝗧𝗼𝗴𝗴𝗹𝗲');
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗳𝗶𝗿𝘀𝘁𝗧𝗼𝗴𝗴𝗹𝗲.𝗼𝗻);
// 𝗳𝗶𝗿𝘀𝘁𝗧𝗼𝗴𝗴𝗹𝗲.𝘁𝗼𝗴𝗴𝗹𝗲();
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝗳𝗶𝗿𝘀𝘁𝗧𝗼𝗴𝗴𝗹𝗲.𝗼𝗻);
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗴𝗿𝗼𝘂𝗽𝗘𝗻𝗱('𝗳𝗶𝗿𝘀𝘁𝗧𝗼𝗴𝗴𝗹𝗲');

// 𝗰𝗼𝗻𝘀𝘁 𝘀𝗲𝗰𝗼𝗻𝗱𝗧𝗼𝗴𝗴𝗹𝗲 = 𝗻𝗲𝘄 𝗧𝗼𝗴𝗴𝗹𝗲();
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗴𝗿𝗼𝘂𝗽('𝘀𝗲𝗰𝗼𝗻𝗱𝗧𝗼𝗴𝗴𝗹𝗲');
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝘀𝗲𝗰𝗼𝗻𝗱𝗧𝗼𝗴𝗴𝗹𝗲.𝗼𝗻);
// 𝘀𝗲𝗰𝗼𝗻𝗱𝗧𝗼𝗴𝗴𝗹𝗲.𝘁𝗼𝗴𝗴𝗹𝗲();
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗹𝗼𝗴(𝘀𝗲𝗰𝗼𝗻𝗱𝗧𝗼𝗴𝗴𝗹𝗲.𝗼𝗻);
// 𝗰𝗼𝗻𝘀𝗼𝗹𝗲.𝗴𝗿𝗼𝘂𝗽𝗘𝗻𝗱('𝘀𝗲𝗰𝗼𝗻𝗱𝗧𝗼𝗴𝗴𝗹𝗲');
